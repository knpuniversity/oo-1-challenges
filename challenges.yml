# Chapter the-project
project_startservermc:
  question: |
    We're using the built-in PHP web server for development. If you wanted to
    use it on your production server, which command would you run?
  explanation: |
    The intention of this PHP built-in web server is to aid application development,
    testing, or for application demonstrations that are run in controlled environments.
    So, just don't use it for production, it may leak memory, might have security risks, low performance, etc.
    Instead, use any other real web server, like *Apache* or *Nginx*.
  features:
    multiple_choice:
      choices:
        a: "php -S localhost:8000"
        b: "php -S www.yoursitename.com"
        c: "The built-in web server should only be used for development"
        d: "php -S yoursitename.com:80"
      correct: c

project_loopshipsarraycoding:
  question: |
    Our `get_ships()` function returns an array of *amazing* ships. But which
    ship has the most strength? Let's find out and print it to the screen.
  question_steps:
    - |
        In `index.php`, call `get_ships()` and set it to a variable.
    - |
        Loop over the array of ships and print the `name` of the ship that has the highest strength.
  step: loop-ships-array
  files:
    index.php: ~
    functions.php:
      read_only: true
  features:
    editor: ~
    browser: ~
  grading:
    check_call_get_ships:
      type: php
      assertTrue: inputContains('index.php', 'get_ships()')
      failure: Did you call the `get_ships()` function?
    check_loop_over_ships:
      type: php
      assertTrue: inputContains('index.php', 'foreach')
      failure: Don't forget to use a `foreach` to loop over the ships!
    check_ship_name:
      type: http
      assertTrue: body() matches '/Super Star Destroyer/'
      failure: Look's like you printed the wrong ship. Did you check for `strength` field?
      
# Chapter basic-class
classobject_keysmc:
  question: |
    Arrays have array *keys*. What is the equivalent of array keys for a class?
  explanation: |
    A property in a class is very similar to a key in an array: both are basically
    a key (e.g. `name`, `strength`) that can contain any value: a number, string, boolean, an object...
  features:
    multiple_choice:
      choices:
        a: "constants"
        b: "methods"
        c: "variables"
        d: "properties"
      correct: d
      
classobject_addshippropertiescoding:
  question: |
    Now that we know how to define properties and set their values on a class, let's
    keep going! Update the `Ship` class to have *all* of the fields that our ships
    array has.
  question_steps:
    - |
        Add each key defined in our ships array (e.g. `strength`, etc) as a property
        in the Ship class. To follow a common convention, use camel case for the
        property names (e.g. `weapon_power` becomes `weaponPower`).
    - |
        Instantiate a new Ship object and set it to a `$myShip` variable.
    - |
        Set the `weaponPower` property of your Ship to *100* and print this to the screen!
  step: class-object-add-ship-properties
  files:
    index.php: ~
    functions.php:
      read_only: true
  features:
    editor: ~
    browser: ~
  grading:
    check_property_weaponPower:
      type: php
      assertTrue: class('\Ship').hasProperty('weaponPower')
      failure: Did you add `$weaponPower` property?
    check_property_jediFactor:
      type: php
      assertTrue: class('\Ship').hasProperty('jediFactor')
      failure: Did you add `$jediFactor` property?
    check_property_strength:
      type: php
      assertTrue: class('\Ship').hasProperty('strength')
      failure: Did you add `$strength` property?
    check_new_ship:
      type: php
      assertTrue: inputContains('index.php', '$myShip')
      failure: Did you set a new Ship object to a `$myShip` variable?
    check_print_weaponPower:
      type: http
      assertTrue: body() matches '/100/'
      failure: I don't see weapon power in the output - did you print it?
